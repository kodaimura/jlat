#!/bin/bash

if [ $# -eq 0 ]; then
    echo "ERROR: jlat <appname> [-db {SQLite| PostgreSQL | MySQL}]"
    exit 1
fi

APP_NAME=${1:-goatapp}
shift

DB="SQLite"

while (( $# > 0 ))
do
  case $1 in
    -db | --db | --db=*)
      if [[ $1 =~ ^--db= ]]; then
        DB=$2
      elif [ -z $2 ]; then
        echo "ERROR: jlat <appname> [-db {SQLite| PostgreSQL | MySQL}]"
        exit 1
      else
        DB=$2
        shift
      fi
  esac
  shift
done

if [ $DB != "SQLite" ] && [ $DB != "PostgreSQL" ] && [ $DB != "MySQL" ]; then
	echo "ERROR: jlat <appname> [-db {SQLite| PostgreSQL | MySQL}]"
  exit 1
fi

CURRENT_DIR=$(pwd)
TEMPLATE_DIR=$(cd $(dirname $0); cd ../template; pwd)

mkdir "$CURRENT_DIR/$APP_NAME"_Tmp
cd "$CURRENT_DIR/$APP_NAME"_Tmp

cat <<EOF > Dockerfile
FROM julia:1.11
RUN julia -e "using Pkg; Pkg.add(\"Genie\")"
WORKDIR /app
EOF

cat <<EOF > docker-compose.yml
services:
  genie:
    build: .
    volumes:
      - .:/app
    command: sh -c "julia -e 'using Genie; Genie.Generator.newapp_mvc(\"$APP_NAME\",autostart = false, dbadapter = :$DB)'"
EOF

docker compose build --no-cache
docker compose up
docker compose down

mv $APP_NAME ../
cd ../
rm -rf "$APP_NAME"_Tmp

cd $APP_NAME
rm -rf public
rm -rf app

cp -r $TEMPLATE_DIR/public .
cp -r $TEMPLATE_DIR/app .
cp -r $TEMPLATE_DIR/Makefile .
cp -r $TEMPLATE_DIR/docker-compose.prod.yml .
cp -r $TEMPLATE_DIR/docker-compose.yml .
cp -r $TEMPLATE_DIR/Dockerfile .
cp -r $TEMPLATE_DIR/routes.jl .

#cp -r $TEMPLATE_DIR/* $CURRENT_DIR/$APP_NAME
#
#cd $CURRENT_DIR/$APP_NAME
#mv cmd/goat cmd/$APP_NAME

if [ $DB = "SQLite" ]; then
  touch $APP_NAME.db
fi
#
#if [ $DB = "postgres" ]; then
#  rm -r scripts
#  cp -r _setup/postgresql/scripts .
#  cp -r _setup/postgresql/repository internal/
#  cp -r _setup/postgresql/env config/
#  cp -r _setup/postgresql/docker-compose.yml .
#  cp -r _setup/postgresql/Dockerfile .
#fi
#
#if [ $DB = "mysql" ]; then
#  rm -r scripts
#  cp -r _setup/mysql/scripts .
#  cp -r _setup/mysql/repository internal/
#  cp -r _setup/mysql/env config/
#  cp -r _setup/mysql/docker-compose.yml .
#  cp -r _setup/mysql/Dockerfile .
#  cp -r _setup/mysql/my.ini .
#fi
#
## goatを置換
#for fpath in `find . -name "*.go"`
#do sed -i "" s/goat/$APP_NAME/g $fpath
#done
#sed -i "" s/goat/$APP_NAME/g go.mod
#sed -i "" s/goat/$APP_NAME/g Makefile
#sed -i "" s/goat/$APP_NAME/g Dockerfile
#sed -i "" s/goat/$APP_NAME/g docker-compose.yml
#sed -i "" s/goat/$APP_NAME/g docker-compose.prod.yml
#sed -i "" s/goat/$APP_NAME/g ./config/env/.env
#sed -i "" s/goat/$APP_NAME/g ./config/env/local.env
#sed -i "" s/goat/$APP_NAME/g ./scripts/create-table.sql
#sed -i "" s/goat/$APP_NAME/g ./web/static/manifest.json
#
#for fpath in `find . -name "*.DS_Store"`
#do rm $fpath
#done
#
#cat <<EOF > .gitignore
#*.log
#*.db
#*.sqlite3
#.env
#.DS_Store
#main
#gent
#data
#EOF
#
#yes | rm -r _setup