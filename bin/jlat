#!/bin/bash

if [ $# -eq 0 ]; then
    echo "ERROR: jlat <appname> [-db {SQLite| PostgreSQL | MySQL}]"
    exit 1
fi

APP_NAME=${1:-goatapp}
shift

DB="SQLite"

while (( $# > 0 ))
do
  case $1 in
    -db | --db | --db=*)
      if [[ $1 =~ ^--db= ]]; then
        DB=$2
      elif [ -z $2 ]; then
        echo "ERROR: jlat <appname> [-db {SQLite| PostgreSQL | MySQL}]"
        exit 1
      else
        DB=$2
        shift
      fi
  esac
  shift
done

if [ $DB != "SQLite" ] && [ $DB != "PostgreSQL" ] && [ $DB != "MySQL" ]; then
	echo "ERROR: jlat <appname> [-db {SQLite| PostgreSQL | MySQL}]"
  exit 1
fi

APP_DIR=$(pwd)/$APP_NAME
TEMPLATE_DIR=$(cd $(dirname $0); cd ../template; pwd)
TEMPLATE_SUB_DIR=$(cd $(dirname $0); cd ../template_sub; pwd)

docker run --rm -v $APP_DIR:/$APP_NAME julia:1.11 sh -c "julia -e 'using Pkg; Pkg.add(\"Genie\"); using Genie; Genie.Generator.newapp_mvc(\"$APP_NAME\", autostart = false, dbadapter = :$DB)'"

cd $APP_DIR

rm -rf public
rm -rf app

cp -r $TEMPLATE_DIR/public .
cp -r $TEMPLATE_DIR/app .
cp -r $TEMPLATE_DIR/Makefile .
cp -r $TEMPLATE_DIR/docker-compose.prod.yml .
cp -r $TEMPLATE_DIR/docker-compose.yml .
cp -r $TEMPLATE_DIR/Dockerfile .
cp -r $TEMPLATE_DIR/routes.jl .
cp -r $TEMPLATE_SUB_DIR/$DB/* .

if [ $DB = "SQLite" ]; then
  touch $APP_NAME.db
fi

# Jlatを置換
sed -i "" s/Jlat/$APP_NAME/g ./db/connection.yml
sed -i "" s/Jlat/$APP_NAME/g ./docker-compose.yml

for fpath in `find . -name "*.DS_Store"`
do rm $fpath
done

docker compose down
docker compose up -d
until docker compose ps -q app | xargs docker inspect -f '{{.State.Running}}' | grep -q true; do
  sleep 1
done
docker compose exec app julia -e 'using Pkg; Pkg.activate("."); Pkg.add("HTTP"); Pkg.add("JSON"); Pkg.add("Base64"); Pkg.add("SHA"); Pkg.add("Reexport")'
if [ $DB = "SQLite" ]; then
  docker compose exec app julia -e 'using Pkg; Pkg.activate("."); using SearchLight; using SearchLightSQLite; SearchLight.Configuration.load(); SearchLight.connect(); SearchLight.Migration.init(); SearchLight.Migration.all_up!!()'
elif [ $DB = "PostgreSQL" ]; then
  docker compose exec app julia -e 'using Pkg; Pkg.activate("."); using SearchLight; using SearchLightPostgreSQL; SearchLight.Configuration.load(); SearchLight.connect(); SearchLight.Migration.init(); SearchLight.Migration.all_up!!()'
elif [ $DB = "MySQL" ]; then
  docker compose exec app julia -e 'using Pkg; Pkg.activate("."); using SearchLight; using SearchLightMySQL; SearchLight.Configuration.load(); SearchLight.connect(); SearchLight.Migration.init(); SearchLight.Migration.all_up!!()'
else
  echo "Unsupported database: $DB"
  exit 1
fi

cat <<EOF >> .gitignore


# Jlat customization
data
*.db
*.sqlite3
EOF

docker compose down
docker compose build --no-cache